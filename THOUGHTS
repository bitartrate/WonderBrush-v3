Rendern mit Zoomstufe

Rein-/Rauszoomen sind zwei völlig verschiedene Paar Schuhe. Wenn man reingezoomt ist, muss man einen geringen Ausschnitt des Dokuments in Originalauflösung berechnen und vergrößert darstellen. Wenn man rausgezoomt ist, muss man viel weniger Pixel berechnen, als für die Originalauflösung erforderlich. Würde man alle Pixel berechnen und dann nur lückenhaft darstellen, ergebe sich zudem eine hässliche Darstellung, da ist es doch viel einfacher, so zu tun, als wäre die Originalauflösung kleiner und das Dokument so zu berechnen. Photoshop scheint manche Zoomstufen zu filtern (25%, 50%), aber mit dem vorgeschlagenen Ansatz wäre jede Zoomstufe quasi "perfekt gefiltert".


Blockweise Bitmaps und Caches

Es ist sinnvoll, die Dokumentansicht zu einem bestimmten Objektlevel zu cachen. Vielleicht wäre es von Vorteil, wenn man diesen Cache in gleichmäßige Blöcke (Ausschnitte aus der Ansicht) unterteilt, die jeweils ein unterschiedliches Objektlevel enthalten können. Braucht man beim Rendern einen (Teil von einem) Cacheblock, stellt aber fest, dass dieser veraltet ist, so erweitert man das Rendering einfach um die Fläche des gesamten Blocks, so dass der Block beim nächsten Rendering komplett gültig vorliegt.


An welcher Stelle sind die Caches im Objektbaum, auch jeweils an den Knoten?


Inwiefern soll es auf Festplatte ausgelagerte Bitmapdaten geben?

BitmapData
	-> Repräsentation von BitmapDaten
	-> nur eine globale Instanz derselben Daten
	-> referenzierbar

BitmapManager
	-> Managed BitmapData Objekte
	-> Applikationsweit nur eine Instanz

BitmapObjekt
	-> neue Objekte kreieren neue BitmapData Instanz und übergibt an
	   BitmapManager
	-> referenziert BitmapData
	-> eigentlich RechteckObjekt mit Bitmap-Füllung


Applikationsweiter "FillCache", könnte auch BitmapManager beinhalten. Bitmaps werden allerdings immer gemeinsam benutzt.

Fill
FillColor
FillGradient
FillBitmap

Ein "Style" ist nicht wie bei Icon-O-Matic die Füllung, sondern eine Art Container für verschiedene Eigenschaften. Nicht gesetzte Eigenschaften könnten hierarchisch vererbt werden.

Objekte können einen privaten Style haben oder der Style kann öffentlich werden und dann von anderen Objekten benutzt werden. Die Änderungen an dem Style durch irgendeines der Objekte werden in allen Objekten sichtbar.

Wie in Icon-O-Matic könnte man nicht nur globale Styles, sondern auch Füllungen und Pfade verfügbar machen. Allerdings optional, nicht standardmäßig bei neuen Objekten.

Füllungen müssen optional einen Alphakanal (Bitmap) unterstützen. Jedenfalls so, dass man mit dem Fülleimer ins Bild klicken kann und dann nicht nur mit einer Farbe, sondern auch mit allen anderen Fülltypen füllen kann.

Füllfarben sollten auch als "Schattierung" einer anderen Farbe auftreten können. Wenn die Hauptfarbe gelöscht wird, erscheint ein Bestätigungsdialog, ob alle Schattierungen in normale Farben umgewandelt werden sollen. Alternativ könnte man auch eine zusätzliche Eigenschaft im Style verwalten, die dafür sorgt, dass eine Füllung abgedunkelt oder sonst wie verändert wird.


Layouting:
Layouting bedeutet, dass der Objektbaum traversiert wird und Abhängigkeiten final aufgelöst werden. Zum Beispiel könnte eine Objektgröße von der aktuellen Fontgröße abhängen, wobei der Font nur in einem übergeordneten Objekt gesetzt ist. Da die Tools auch fertig "gelayoutete" Objektparameter benötigen werden, ist es sinnvoll, das Layout auf dem Originaldokument durchzuführen. Dazu müssten Veränderungen eines Objektes darauf hinweisen, dass ein Layout das Unterbaums nötig ist. Alternativ könnten absolute Parameter im Originalobjektbaum immer live aufgelöst werden, aber der explizite Layoutvorgang könnte es erleichtern, die Regionen zum Neurendern zu wissen. Prinzipiell ist auch ein Layout der Snapshots notwendig, und zwar asynchron vor jedem Rendervorgang. Hierbei können zum Beispiel der aktuelle Zoom und Scrolloffset in die globalen Matrizen einfließen, welche im Originaldokument außen vor bleiben sollten.


PropertyObject Interface erweitern:
	-> Abfrage nach Anzahl von "PropertyObjects" oder "PropertyCategory" oder
	   "Sub-PropertyObject" (nested PropertyObjects?)
	-> einklappbare Abschnitte für jede einzelne PropertyCategory in ListView
	-> PropertyCategory unterstützt Hinzufügen von Properties.
	-> So wird dann beispielsweise der Style eines Objects im selben
	   PropertyListView anzeig- und editierbar.

Alternative Ansicht für die Layer und Objekte: Die Ansicht zeigt nur die Objekte des aktuellen Layers. Bei Doppelklick auf ein Layer verschiebt sich die Ansicht nach links um ihre Breite (mit schnellem Scrolleffekt) und zeigt jetzt die Objekte des geklickten Layers. Man kann in der Hierarchie nach rechts (rein/tiefer) und links (raus/höher) über Pfeilknöpfe, zusätzlich könnte es ein "Breadcrumb" Control geben, so dass man im aktuellen Pfad springen kann. Dieser könnte von oben nach unten verlaufen. Der Pfad ändert sich durch expliziten Doppelklick auf ein Layer, bleibt aber ansonsten stabil, wenn der Nutzer nur kurz zwischen den Ebenen hin- und herspringt.

